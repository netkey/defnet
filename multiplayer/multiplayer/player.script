go.property("is_player", false)

local platformer = require "ludobits.m.platformer"
local input = require "ludobits.m.input"

local MSG_LEFT = hash("left")
local MSG_RIGHT = hash("right")
local MSG_STOP = hash("stop")
local MSG_JUMP = hash("jump")
local MSG_ABORT_JUMP = hash("abort_jump")
local MSG_NAME = hash("name")
local MSG_ACTION = hash("action") 
local MSG_POSITION = hash("position") 

local function left(self)
	self.physics.left(140)
end

local function right(self)
	self.physics.right(140)
end

local function stop(self)
	self.physics.stop()
end

local function jump(self)
	self.physics.jump(800)
end

local function abort_jump(self)
	self.physics.abort_jump()
end

function init(self)
	self.physics = platformer.create({ hash("ground") })
	self.physics.gravity = -800
end

function final(self)
end

function update(self, dt)
	if self.is_player then
		self.physics.update(dt)
	end
	
	if self.action then
		self.action(self)
	end
end

function on_message(self, message_id, message, sender)
	self.physics.on_message(message_id, message, sender)
	if message_id == MSG_NAME then
		label.set_text("#name", message.name or "John Smith")
	elseif message_id == MSG_LEFT then
		left(self)
	elseif message_id == MSG_RIGHT then
		right(self)
	elseif message_id == MSG_STOP then
		stop(self)
	elseif message_id == MSG_JUMP then
		jump(self)
	elseif message_id == MSG_ABORT_JUMP then
		abort_jump(self)
	elseif message_id == MSG_ACTION then
		--[[if message.action == "left" then
			self.action = left
		elseif message.action == "right" then
			self.action = right
		elseif message.action == "stop" then
			stop(self)
		elseif message.action == "jump" then
			jump(self)
		elseif message.action == "abort_jump" then
			abort_jump(self)
		end--]]
	elseif message_id == MSG_POSITION then
		-- animate between current and target position to try and get
		-- smooth movement
		local target = vmath.vector3(message.x, message.y, message.z or 0)
		local current = go.get_position()
		local distance = vmath.length(target - current)
		local duration = 1.5 / distance
		go.cancel_animations(".", "position")
		go.animate(".", "position", go.PLAYBACK_ONCE_FORWARD, target, go.EASING_LINEAR, duration)
	end
end

function on_input(self, action_id, action)
end

function on_reload(self)
    -- Add reload-handling code here
    -- Remove this function if not needed
end
