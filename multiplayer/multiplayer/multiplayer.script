local input = require "ludobits.m.input"
local flow = require "ludobits.m.flow"
local multiplayer = require "multiplayer.multiplayer"
local trickle = require "multiplayer.trickle"

local LEFT = hash("left")
local RIGHT = hash("right")
local JUMP = hash("jump")

local position_signature = {
	{ "id", "string" },
	{ "x", "float" },
	{ "y", "float" },
}

local player_action_signature = {
	{ "id", "string" },
	{ "action", "string" },
}

local POSITION = "POSITION"
local PLAYER_ACTION = "PLAYER_ACTION"


local function create_player(position, name, is_player)
	local id = factory.create("#playerfactory", position, nil, { is_player = is_player }, 1)
	msg.post(id, "name", { name = name })
	return id
end


function init(self)
	input.acquire()
	math.randomseed(os.time())
	self.players = {}
	
	self.count = 0
	
	-- create player game object when a new client joins
	multiplayer.register_handler(multiplayer.CLIENT_JOINED, function(message, from_ip, from_port)
		if not self.players[message.id] then
			if message.id == self.player_id then
				self.players[message.id] = create_player(vmath.vector3(math.random(150, 150), 400, 0), "Player", true)
			else
				self.players[message.id] = create_player(vmath.vector3(math.random(150, 150), 400, 0), message.id:sub(1, 15), false)
			end
			pprint(self.players)
		end
	end)
	
	-- remove player game object when player disconnects from server
	multiplayer.register_handler(multiplayer.CLIENT_LEFT, function(message, from_ip, from_port)
		if self.players[message.id] then
			go.delete(self.players[message.id])
			self.players[message.id] = nil
		end
	end)
	
	-- define and create a handler for player position updates
	multiplayer.register_message(POSITION, position_signature)
	multiplayer.register_handler(POSITION, function(message, from_ip, from_port)
		if self.players[message.id] and message.id ~= self.player_id then
			msg.post(self.players[message.id], "position", { x = message.x, y = message.y })
		end
	end)
	
	--  define and create a handler for player action updates
	multiplayer.register_message(PLAYER_ACTION, player_action_signature)
	multiplayer.register_handler(PLAYER_ACTION, function(message, from_ip, from_port)
		if self.players[message.id] and message.id ~= self.player_id then
			msg.post(self.players[message.id], "action", { action = message.action })
		end
	end)

	-- start the multiplayer server
	-- handle received player id when connected
	multiplayer.start(function(my_id)
		self.player_id = my_id
	end)
	
	-- send updates to the other clients 10 times per second
	flow(function()
		while true do
			if self.player_id then
				local pos = go.get_position(self.players[self.player_id])
				multiplayer.send_message(POSITION, { x = pos.x, y = pos.y, id = self.player_id })
			end
			if self.action then
				multiplayer.send_message(PLAYER_ACTION, { action = self.action, id = self.player_id })
			end
			flow.delay(0.1)
		end
	end)
end

function final(self)
	input.release()
	multiplayer.stop()

	for k,player in pairs(self.players) do
		go.delete(player)
	end
end

function update(self, dt)
	multiplayer.update(dt)
	flow.update(dt)

	if self.player_id then
		if input.is_pressed(LEFT) then
			msg.post(self.players[self.player_id], "left")
			self.action = "left"
		elseif input.is_pressed(RIGHT) then
			msg.post(self.players[self.player_id], "right")
			self.action = "right"
		else
			msg.post(self.players[self.player_id], "stop")
			self.action = "stop"
		end
		local player_pos = go.get_position(self.players[self.player_id])
		go.set_position(player_pos - vmath.vector3(320, 300, 0), "camera")
	end
end

function on_message(self, message_id, message, sender)
	multiplayer.on_message(message_id, message, sender)
end

function on_input(self, action_id, action)
	input.on_input(action_id, action)
	if self.player_id then
		if action_id == JUMP then
			if action.pressed then
				msg.post(self.players[self.player_id], "jump")
				self.action = "jump"
			elseif action.released then
				msg.post(self.players[self.player_id], "abort_jump")
				self.action = "abort_jump"
			end
		end
	end
end

function on_reload(self)
    -- Add reload-handling code here
    -- Remove this function if not needed
end
