local p2p_discovery = require "defnet.p2p_discovery"
local tcp_server = require "defnet.tcp_server"
local tcp_client = require "defnet.tcp_client"
local udp = require "defnet.udp"
local http_server = require "defnet.http_server"

local P2P_PORT = 50000
local UDP_SERVER_PORT = 9192
local TCP_SERVER_PORT = 9191
local HTTP_SERVER_PORT = 9190

function init(self)
	msg.post(".", "acquire_input_focus")

	self.create_server = gui.get_node("create_server/button")
	self.create_client = gui.get_node("create_client/button")
	self.send_to_server = gui.get_node("send_to_server/button")
	self.send_to_clients = gui.get_node("send_to_clients/button")
	self.logo = gui.get_node("logo")
	gui.set_enabled(self.send_to_server, false)
	gui.set_enabled(self.send_to_clients, false)
	
	self.http_server = http_server.create(HTTP_SERVER_PORT)
	self.http_server.router.get("/foo/(.*)$", function(matches)
		return self.http_server.html("boo" .. matches[1])
	end)
	self.http_server.router.get("/lorem$", function(matches, stream)
		stream(self.http_server.html())
		local chunks = { "Lorem ", "ipsum ", "dolor ", "sit ", "amet, ", "consectetur ", "adipiscing ", "elit." }
		return function()
			if #chunks > 0 then
				return stream(self.http_server.to_chunk(table.remove(chunks, 1)))
			else
				return stream(self.http_server.to_chunk(""))
			end
		end
	end)
	self.http_server.router.get("/$", function()
		return self.http_server.html("Hello World")
	end)
	self.http_server.router.get("^/logo$", function()
		local f = io.open("assets/images/logo.png")
		local data = f:read("*a")
		return self.http_server.file(data, "logo.png")
	end)
	self.http_server.router.unhandled(function(method, uri)
		return self.http_server.html("Oops, couldn't find that one!", http_server.NOT_FOUND)
	end)	
	
	self.p2p = p2p_discovery.create(P2P_PORT)
	
	self.tcp_server = tcp_server.create(TCP_SERVER_PORT, function(data, ip, port)
		print("TCP server received data '" .. data .. "' from " .. ip .. ":" .. port)
		gui.animate(self.logo, "rotation.z", gui.get_rotation(self.logo).z -360, gui.EASING_INOUTEXPO, 2, 0, nil, gui.PLAYBACK_ONCE_FORWARD)
	end)
	
	self.type = nil
end

function final(self)
	msg.post(".", "release_input_focus")
	
	self.http_server.stop()
	self.p2p.stop()
	if self.tcp_server then
		self.tcp_server.stop()
	end
	if self.tcp_client then
		self.tcp_client.destroy()
	end
	if self.udp then
		self.udp.destroy()
	end
end

function update(self, dt)
	self.http_server.update()
	self.p2p.update()
	if self.tcp_server then
		self.tcp_server.update()
	end
	if self.tcp_client then
		self.tcp_client.update()
	end
	if self.udp then
		self.udp.update()
	end
end

function on_input(self, action_id, action)
	if gui.pick_node(self.create_server, action.x, action.y) and action.released and not self.type then
		print("Creating server")
		gui.set_enabled(self.create_server, false)
		gui.set_enabled(self.create_client, false)
		gui.set_enabled(self.send_to_clients, true)
		self.type = "server"
		self.http_server.start()
		self.p2p.broadcast("findme")
		self.tcp_server.start()
		self.udp = udp.create(function(data, ip, port)
			print("UDP server received data '" .. data .. "' from " .. ip .. ":" .. port)
			gui.animate(self.logo, "rotation.z", gui.get_rotation(self.logo).z -360, gui.EASING_INOUTEXPO, 2, 0, nil, gui.PLAYBACK_ONCE_FORWARD)
			self.udp.send("udp echo", ip, port)
		end, UDP_SERVER_PORT)
		
	elseif gui.pick_node(self.create_client, action.x, action.y) and action.released and not self.type then
		print("Creating client")
		gui.set_enabled(self.create_server, false)
		gui.set_enabled(self.create_client, false)
		self.type = "client"
		self.p2p.listen("findme", function(ip, port)
			print("Found server", ip, port)
			print("Creating TCP client")
			self.tcp_client = tcp_client.create(ip, TCP_SERVER_PORT, function(data)
				print("TCP client received response '" .. data .. "'")
				gui.animate(self.logo, "rotation.z", gui.get_rotation(self.logo).z -360, gui.EASING_INOUTEXPO, 2, 0, nil, gui.PLAYBACK_ONCE_FORWARD)
			end)
			print("Creating UDP connection")
			self.udp = udp.create(function(data)
				print("UDP client received response '" .. data .. "'")
			end, nil, ip, UDP_SERVER_PORT)
			print("enabling send to server")
			gui.set_enabled(self.send_to_server, true)
		end)
	elseif gui.pick_node(self.send_to_server, action.x, action.y) and action.released and self.type == "client" then
		if self.tcp_client then
			print("Sending data to TCP server")
			self.tcp_client.send("tcp from client to server\n")
		end
		if self.udp then
			print("Sending data to UDP server")
			self.udp.send("udp from client to server")
		end
	elseif gui.pick_node(self.send_to_clients, action.x, action.y) and action.released and self.type == "server" then
		print("Sending data to TCP clients")
		self.tcp_server.send("tcp from sever to client foobar\n")
	end
end

function on_reload(self)
	print("onreload")
    -- Add input-handling code here
    -- Remove this function if not needed
end
